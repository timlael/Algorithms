Script started on Thu Oct 22 22:10:07 2015
[?1034hbash-3.2$ cat mergesort.cpp
/*  Tim M. Lael  CS 3010 e01  Project 2  Part A - Mergesort*/
#include <iostream>#include <ctime>#include <cmath>

/* 	Array fill function */int fill(int *array, int size){	for(int i=0; i<size; i++){		array[i] = (rand()%1000000);  }  return *array;}/* 	Array zero function */int clear(int *array, int size){	for(int i=0; i<size; i++){		array[i] = 0;  }  return *array;}/* 	Array print function */int print(int *array, int n){	for(int row=0; row<n/10; row++){		for(int col=0; col<10; col++){			printf("%i \t", array[(row*10)+col]);  	}	printf("\n");	}return *array;}/* Array append function */int appendArray(int *sa, int *la, int *oa ,int sasize, int lasize){	for (int i=0; i<lasize; i++) {		oa[i] = la[i];  }	for (int j = lasize, k=0; j<lasize + sasize; j++, k++){	  oa[j] = sa[k];  }return *oa;}/* Merge sorted arrays function */int mergeTwo(int *sa, int *la, int *oa, int sasize, int lasize){	int i = 0;	int j = 0;	int k = 0;	while (i < sasize && j < lasize){  	if (sa[i] < la[j]){    	oa[k] = sa[i];      i++;    }    else{      oa[k] = la[j];      j++;    }    k++;  }  if (i >= sasize){  	while (j < lasize){    	oa[k] = la[j];      j++;
      k++;
    }
}
  if (j >= lasize){
  	while (i < sasize){
    	oa[k] = sa[i];
      	i++;
        k++;
    }
  }
return *oa;
}

/* Order and merge function */
void merge(int *arr, int *temp, int left, int mid, int right){
	int i, left_end, num_elements, tmp_pos;
  left_end = mid - 1;
  tmp_pos = left;
  num_elements = right - left + 1;

	while ((left <= left_end) && (mid <= right)){
  	if (arr[left] <= arr[mid]){
    	temp[tmp_pos] = arr[left];
    	tmp_pos = tmp_pos + 1;
    	left = left +1;
		}
    else{
    	temp[tmp_pos] = arr[mid];
      tmp_pos = tmp_pos + 1;
      mid = mid + 1;
		}
	}

	while (left <= left_end){
  	temp[tmp_pos] = arr[left];    left = left + 1;
    tmp_pos = tmp_pos + 1;
	}

	while (mid <= right){
  	temp[tmp_pos] = arr[mid];
    mid = mid + 1;
    tmp_pos = tmp_pos + 1;
  }

	for (i = 0; i <= num_elements; i++){
  	arr[right] = temp[right];
    right = right - 1;
	}
}

/* Recursively break into smaller chunks and sort */
void m_sort(int *arr, int *temp, int left, int right){
	int mid;

	if (right > left){
  	mid = (right + left) / 2;
    m_sort(arr, temp, left, mid);
    m_sort(arr, temp, mid+1, right);
    merge(arr, temp, left, mid+1, right);
	}
}

/* Main mergesort control function */
void mergeSort(int *arr, int *temp, int array_size){
	m_sort(arr, temp, 0, array_size - 1);
}

/* Method 1 - Append smaller array then re-sort */
void appendSort(int small, int large){
	int narray[small];
  int marray[large];
  int out[large+small];
	int temp[large+small];
	int mtemp[large];

  fill(narray, small);
  fill(marray, large);
	mergeSort(marray,mtemp,large);
  printf("\nSmall array:\n");
  print(narray, small);
  printf("\nLarge array:\n");
  print(marray, large);

  appendArray(narray, marray, out, small, large);
  printf("\nAppended array:\n");
	print(out, small + large);
	mergeSort(out,temp,large+small);
  printf("\nSorted array:\n");
	print(out, small + large);
}

/* Methos 2 - Sort smaller array then
	append two sorted arrays */
void sortMerge(int small, int large){
	int marray[small];
  int narray[large];
  int out[large+small];
	int temp[large+small];
	int mtemp[small];
	int ntemp[large];

	fill(narray, large);
  fill(marray, small);
	mergeSort(narray, ntemp, large);
	printf("\nOriginal sorted large array of %i elements:\n", large);
  print(narray, large);
  printf("\nOriginal unsorted small array of %i elements:\n", small);
  print(marray, small);
	mergeSort(marray, mtemp, small);
	printf("\nSorted small array:\n");
	print(marray, small);
	mergeTwo(marray, narray, out, small, large);
	printf("\nMerged array of %i elements:\n", small+large);
	print(out, small + large);
}

/* Used to run and gather statistics for analysis*/
float analysis(int m, int n){
    clock_t t1,t2;
    int a[n];
		int b[m];
		int o[n+m];
		int temp[n+m];
		int as = sizeof(a)/sizeof(a[0]);
		int bs = sizeof(b)/sizeof(b[0]);

    fill(a, as);
		fill(b, bs);

		t1=clock();
		appendArray(a, b, o, as, bs);
		mergeSort(o,temp,n+m);
    t2=clock();
    float diff = (t2-t1);
    float seconds = diff / CLOCKS_PER_SEC;
    return seconds;
}

/* Used to run functions for script output */
void script(int small, int large){
	int a[small];
	int t[small];

	fill(a, small);
	printf("\nMerge sort operation working on 100 element array:\n");
	printf("\nOriginal 100 element array\n");
	print(a, small);
	mergeSort(a, t, small);
	printf("\nSorted 100 element array\n");
	print(a,small);
	clear(a, small);
	printf("\nSorting a smaller file and merging it with a larger file:\n");
	printf("\n** Note: 100 elements chosen for small file and 500 for large since sizes weren't explicitly specified for this step. **\n");

	sortMerge(small, large);
}

void analysis(){
	int x = pow(10,3);
	int y = pow(10,4);
	int z = pow(10,5);
	int m1 = 25;
	int m2 = 50;
	int m3 = 100;
	float rt;
	float art;

	for (int i=0; i<10; i++){
	  rt += analysis(x, m1);
	}
	art = rt/10;
	printf("\nAvg running time for N = %i and M = %i: %.10f seconds.\n", x, m1, art);
	art = rt = 0;

	for (int i=0; i<10; i++){
	  rt += analysis(x, m2);
	}
	art = rt/10;
	printf("\nAvg running time for N = %i and M = %i: %.10f seconds.\n", x, m2, art);
	art = rt = 0;

	for (int i=0; i<10; i++){
	  rt += analysis(x, m3);
	}
	art = rt/10;
	printf("\nAvg running time for N = %i and M = %i: %.10f seconds.\n", x, m3, art);
	art = rt = 0;

	for (int i=0; i<10; i++){
	  rt += analysis(y, m1);
	}
	art = rt/10;
	printf("\nAvg running time for N = %i and M = %i: %.10f seconds.\n", y, m1, art);
	art = rt = 0;

	for (int i=0; i<10; i++){
	  rt += analysis(y, m2);
	}
	art = rt/10;
	printf("\nAvg running time for N = %i and M = %i: %.10f seconds.\n", y, m2, art);
	art = rt = 0;

	for (int i=0; i<10; i++){
	  rt += analysis(y, m3);
	}
	art = rt/10;
	printf("\nAvg running time for N = %i and M = %i: %.10f seconds.\n", y, m3, art);
	art = rt = 0;
	for (int i=0; i<10; i++){
	  rt += analysis(z, m1);
	}
	art = rt/10;
	printf("\nAvg running time for N = %i and M = %i: %.10f seconds.\n", z, m1, art);
	art = rt = 0;

	for (int i=0; i<10; i++){
	  rt += analysis(z, m2);
	}
	art = rt/10;
	printf("\nAvg running time for N = %i and M = %i: %.10f seconds.\n", z, m2, art);
	art = rt = 0;

	for (int i=0; i<10; i++){
	  rt += analysis(z, m3);
	}
	art = rt/10;
	printf("\nAvg running time for N = %i and M = %i: %.10f seconds.\n", z, m3, art);
	art = rt = 0;
}
int main(int argc, char* argv[]){	srand(time(NULL));
	int m3 = 100;

/* Uncomment lines between here and end script to run script */

	script(m3, 500);

/* End Script */

/* Uncomment lines between here and end analysis to run analysis */

	//analysis();

/* End Analysis */

  return 0;
}

bash-3.2$ g++ mergesort.cpp
bash-3.2$ ./a.out
Merge sort operation working on 100 element array:
Original 100 element array
718334 	353389 	439735 	387065 	321741 	724402 	199374 	24798 	89434 	928830
10402 	458342 	615434 	907270 	419823 	606218 	906357 	812260 	555994 	929086
807248 	117463 	720419 	197385 	380796 	600193 	714528 	420808 	217073 	605488
364191 	537092 	818410 	148902 	951454 	316643 	548655 	562308 	131862 	504568
113678 	463535 	90983 	899470 	219069 	915282 	266915 	632746 	383243 	545634
629172 	171439 	571624 	232595 	474228 	898608 	870649 	29710 	710715 	222297
446883 	378291 	766479 	633828 	439310 	760890 	521058 	737135 	634110 	85669
959246 	972388 	702701 	321439 	503031 	917212 	779913 	520848 	163113 	612642
263479 	459455 	39325 	559583 	793981 	879647 	740672 	492146 	951418 	904194
411773 	980799 	15737 	662763 	508859 	370282 	668303 	146183 	835902 	730765

Sorted 100 element array
10402 	15737 	24798 	29710 	39325 	85669 	89434 	90983 	113678 	117463
131862 	146183 	148902 	163113 	171439 	197385 	199374 	217073 	219069 	222297
232595 	263479 	266915 	316643 	321439 	321741 	353389 	364191 	370282 	378291
380796 	383243 	387065 	411773 	419823 	420808 	439310 	439735 	446883 	458342
459455 	463535 	474228 	492146 	503031 	504568 	508859 	520848 	521058 	537092
545634 	548655 	555994 	559583 	562308 	571624 	600193 	605488 	606218 	612642
615434 	629172 	632746 	633828 	634110 	662763 	668303 	702701 	710715 	714528
718334 	720419 	724402 	730765 	737135 	740672 	760890 	766479 	779913 	793981
807248 	812260 	818410 	835902 	870649 	879647 	898608 	899470 	904194 	906357
907270 	915282 	917212 	928830 	929086 	951418 	951454 	959246 	972388 	980799

Sorting a smaller file and merging it with a larger file:

** Note: 100 elements chosen for small file and 500 for large since sizes weren't explicitly specified for this step. **

Original sorted large array of 500 elements:
2386 	2445 	3979 	6461 	7320 	8855 	10417 	11128 	12424 	15990
20799 	29150 	29926 	32048 	32159 	35125 	35183 	36257 	36341 	38486
42651 	45516 	46037 	47251 	49158 	49976 	50296 	51519 	54242 	54425
55347 	56374 	57538 	61430 	62964 	63599 	64846 	65139 	65497 	66203
66601 	67620 	67766 	67881 	68624 	74878 	76773 	77282 	81437 	81546
84650 	84923 	85251 	87132 	87415 	87538 	87655 	90543 	91324 	93373
96295 	100044 	101248 	103781 	104428 	104785 	106429 	109349 	109576 	111220
112255 	114742 	119361 	122138 	122452 	126740 	126957 	128448 	131889 	133288
134633 	135156 	135563 	141628 	142477 	142711 	151598 	151907 	154442 	155949
156218 	157982 	158458 	159289 	160674 	161308 	170720 	172155 	173630 	173831
176753 	177515 	178354 	178537 	179805 	181408 	181450 	189763 	192299 	194285
195199 	196311 	196823 	201384 	201407 	203442 	213907 	216020 	218681 	222061
223421 	223891 	225265 	227525 	228585 	228950 	239503 	240287 	241794 	242847
244348 	246748 	248662 	258131 	259298 	264532 	266905 	272978 	276138 	276309
276682 	277473 	277873 	280236 	281167 	283901 	284392 	287711 	289326 	289918
289977 	290032 	298287 	299919 	304847 	305158 	305666 	307412 	312553 	315368
315702 	318619 	318940 	325313 	325454 	328560 	329417 	329504 	330072 	331233
333403 	335300 	336698 	337175 	338048 	338067 	338626 	344070 	347766 	349038
350465 	353583 	362038 	365484 	366554 	370237 	370632 	371931 	372419 	375630
375774 	380270 	386134 	386818 	388976 	389001 	390334 	392634 	394238 	396881
400025 	401880 	403137 	408646 	411458 	412599 	415483 	416254 	417886 	418133
418198 	419207 	421758 	426166 	427401 	427627 	430658 	433495 	435444 	436692
439276 	439593 	439671 	440079 	442266 	442387 	442718 	446613 	450665 	451897
452841 	452981 	453169 	454854 	454947 	455373 	458459 	462190 	462638 	463887
464290 	464553 	467335 	467960 	476384 	483586 	483763 	484029 	485358 	488802
489288 	491065 	491978 	494304 	499458 	501622 	503805 	506608 	507641 	508681
510726 	511228 	511509 	514399 	517211 	520078 	521972 	526002 	527889 	529569
536214 	540035 	540890 	541925 	545251 	548530 	552415 	555081 	555912 	556185
560668 	561641 	561830 	562352 	565686 	567190 	570229 	574354 	574562 	575251
575538 	582069 	585167 	586901 	587383 	588615 	589900 	590842 	595359 	596220
599280 	600315 	610787 	611900 	612594 	613641 	616183 	620168 	623297 	624773
624908 	629058 	632340 	633614 	638004 	644235 	649231 	650638 	651160 	655321
657293 	657612 	657727 	659126 	660295 	661821 	663648 	664911 	665716 	666958
670102 	670207 	670635 	671775 	673458 	674536 	675095 	675420 	678485 	680941
681161 	681838 	682390 	682938 	684134 	684264 	690374 	692014 	692627 	693948
699384 	700929 	702100 	703748 	705804 	707988 	708722 	714239 	716012 	720945
725422 	726888 	732685 	735186 	735629 	736023 	738761 	739952 	740991 	751149
752567 	755952 	759245 	762131 	769190 	771122 	772158 	772643 	772679 	774764
778834 	782486 	784097 	784822 	787671 	789102 	790627 	793787 	794315 	794674
796833 	800389 	802157 	802215 	803628 	807939 	808076 	809833 	811016 	813230
813237 	816921 	818355 	818574 	819363 	820242 	822871 	822976 	824432 	824939
826640 	827711 	828349 	829205 	830368 	841181 	841994 	842253 	843729 	844582
845726 	848683 	850510 	851463 	853018 	854326 	855340 	855374 	857801 	862011
863244 	863921 	864451 	864504 	868329 	870174 	870598 	872363 	873363 	878540
878687 	880620 	880949 	885421 	891181 	891433 	891513 	895806 	895906 	897266
899278 	899570 	903775 	903926 	906605 	909942 	910846 	911264 	911892 	912173
912565 	914358 	921684 	923740 	923809 	924856 	925505 	925576 	928348 	928494
938699 	939903 	940760 	941988 	943566 	946181 	946554 	946784 	947573 	951155
951885 	954088 	955308 	956115 	956808 	963706 	966853 	966892 	967212 	970562
972508 	973239 	974721 	979477 	983171 	993985 	994320 	994384 	995321 	999408

Original unsorted small array of 100 elements:
971608 	299033 	392402 	138762 	941775 	541532 	721989 	896841 	889433 	499792
822294 	611326 	322737 	523205 	856448 	536769 	369097 	318409 	911262 	343810
626947 	993814 	999515 	133383 	747929 	100279 	156370 	980266 	665134 	87594
203996 	983733 	931755 	198972 	281823 	871323 	402680 	416666 	343402 	172354
496725 	179439 	463024 	53227 	592185 	945855 	802927 	944202 	955929 	245845
552507 	910223 	639217 	71941 	130291 	896176 	782270 	127681 	895741 	259001
450697 	462285 	815943 	177393 	292051 	831673 	403275 	164250 	404093 	351971
834019 	919893 	2094 	514621 	313998 	281601 	339538 	787940 	891061 	107633
99804 	999200 	256497 	887141 	275781 	550039 	925155 	22085 	990669 	817219
282564 	17486 	546548 	953161 	397394 	482149 	56344 	145289 	794164 	944190

Sorted small array:
2094 	17486 	22085 	53227 	56344 	71941 	87594 	99804 	100279 	107633
127681 	130291 	133383 	138762 	145289 	156370 	164250 	172354 	177393 	179439
198972 	203996 	245845 	256497 	259001 	275781 	281601 	281823 	282564 	292051
299033 	313998 	318409 	322737 	339538 	343402 	343810 	351971 	369097 	392402
397394 	402680 	403275 	404093 	416666 	450697 	462285 	463024 	482149 	496725
499792 	514621 	523205 	536769 	541532 	546548 	550039 	552507 	592185 	611326
626947 	639217 	665134 	721989 	747929 	782270 	787940 	794164 	802927 	815943
817219 	822294 	831673 	834019 	856448 	871323 	887141 	889433 	891061 	895741
896176 	896841 	910223 	911262 	919893 	925155 	931755 	941775 	944190 	944202
945855 	953161 	955929 	971608 	980266 	983733 	990669 	993814 	999200 	999515

Merged array of 600 elements:
2094 	2386 	2445 	3979 	6461 	7320 	8855 	10417 	11128 	12424
15990 	17486 	20799 	22085 	29150 	29926 	32048 	32159 	35125 	35183
36257 	36341 	38486 	42651 	45516 	46037 	47251 	49158 	49976 	50296
51519 	53227 	54242 	54425 	55347 	56344 	56374 	57538 	61430 	62964
63599 	64846 	65139 	65497 	66203 	66601 	67620 	67766 	67881 	68624
71941 	74878 	76773 	77282 	81437 	81546 	84650 	84923 	85251 	87132
87415 	87538 	87594 	87655 	90543 	91324 	93373 	96295 	99804 	100044
100279 	101248 	103781 	104428 	104785 	106429 	107633 	109349 	109576 	111220
112255 	114742 	119361 	122138 	122452 	126740 	126957 	127681 	128448 	130291
131889 	133288 	133383 	134633 	135156 	135563 	138762 	141628 	142477 	142711
145289 	151598 	151907 	154442 	155949 	156218 	156370 	157982 	158458 	159289
160674 	161308 	164250 	170720 	172155 	172354 	173630 	173831 	176753 	177393
177515 	178354 	178537 	179439 	179805 	181408 	181450 	189763 	192299 	194285
195199 	196311 	196823 	198972 	201384 	201407 	203442 	203996 	213907 	216020
218681 	222061 	223421 	223891 	225265 	227525 	228585 	228950 	239503 	240287
241794 	242847 	244348 	245845 	246748 	248662 	256497 	258131 	259001 	259298
264532 	266905 	272978 	275781 	276138 	276309 	276682 	277473 	277873 	280236
281167 	281601 	281823 	282564 	283901 	284392 	287711 	289326 	289918 	289977
290032 	292051 	298287 	299033 	299919 	304847 	305158 	305666 	307412 	312553
313998 	315368 	315702 	318409 	318619 	318940 	322737 	325313 	325454 	328560
329417 	329504 	330072 	331233 	333403 	335300 	336698 	337175 	338048 	338067
338626 	339538 	343402 	343810 	344070 	347766 	349038 	350465 	351971 	353583
362038 	365484 	366554 	369097 	370237 	370632 	371931 	372419 	375630 	375774
380270 	386134 	386818 	388976 	389001 	390334 	392402 	392634 	394238 	396881
397394 	400025 	401880 	402680 	403137 	403275 	404093 	408646 	411458 	412599
415483 	416254 	416666 	417886 	418133 	418198 	419207 	421758 	426166 	427401
427627 	430658 	433495 	435444 	436692 	439276 	439593 	439671 	440079 	442266
442387 	442718 	446613 	450665 	450697 	451897 	452841 	452981 	453169 	454854
454947 	455373 	458459 	462190 	462285 	462638 	463024 	463887 	464290 	464553
467335 	467960 	476384 	482149 	483586 	483763 	484029 	485358 	488802 	489288
491065 	491978 	494304 	496725 	499458 	499792 	501622 	503805 	506608 	507641
508681 	510726 	511228 	511509 	514399 	514621 	517211 	520078 	521972 	523205
526002 	527889 	529569 	536214 	536769 	540035 	540890 	541532 	541925 	545251
546548 	548530 	550039 	552415 	552507 	555081 	555912 	556185 	560668 	561641
561830 	562352 	565686 	567190 	570229 	574354 	574562 	575251 	575538 	582069
585167 	586901 	587383 	588615 	589900 	590842 	592185 	595359 	596220 	599280
600315 	610787 	611326 	611900 	612594 	613641 	616183 	620168 	623297 	624773
624908 	626947 	629058 	632340 	633614 	638004 	639217 	644235 	649231 	650638
651160 	655321 	657293 	657612 	657727 	659126 	660295 	661821 	663648 	664911
665134 	665716 	666958 	670102 	670207 	670635 	671775 	673458 	674536 	675095
675420 	678485 	680941 	681161 	681838 	682390 	682938 	684134 	684264 	690374
692014 	692627 	693948 	699384 	700929 	702100 	703748 	705804 	707988 	708722
714239 	716012 	720945 	721989 	725422 	726888 	732685 	735186 	735629 	736023
738761 	739952 	740991 	747929 	751149 	752567 	755952 	759245 	762131 	769190
771122 	772158 	772643 	772679 	774764 	778834 	782270 	782486 	784097 	784822
787671 	787940 	789102 	790627 	793787 	794164 	794315 	794674 	796833 	800389
802157 	802215 	802927 	803628 	807939 	808076 	809833 	811016 	813230 	813237
815943 	816921 	817219 	818355 	818574 	819363 	820242 	822294 	822871 	822976
824432 	824939 	826640 	827711 	828349 	829205 	830368 	831673 	834019 	841181
841994 	842253 	843729 	844582 	845726 	848683 	850510 	851463 	853018 	854326
855340 	855374 	856448 	857801 	862011 	863244 	863921 	864451 	864504 	868329
870174 	870598 	871323 	872363 	873363 	878540 	878687 	880620 	880949 	885421
887141 	889433 	891061 	891181 	891433 	891513 	895741 	895806 	895906 	896176
896841 	897266 	899278 	899570 	903775 	903926 	906605 	909942 	910223 	910846
911262 	911264 	911892 	912173 	912565 	914358 	919893 	921684 	923740 	923809
924856 	925155 	925505 	925576 	928348 	928494 	931755 	938699 	939903 	940760
941775 	941988 	943566 	944190 	944202 	945855 	946181 	946554 	946784 	947573
951155 	951885 	953161 	954088 	955308 	955929 	956115 	956808 	963706 	966853
966892 	967212 	970562 	971608 	972508 	973239 	974721 	979477 	980266 	983171
983733 	990669 	993814 	993985 	994320 	994384 	995321 	999200 	999408 	999515
bash-3.2$ exit

Script done on Thu Oct 22 22:10:38 2015
