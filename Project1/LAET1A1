Script started on Fri Sep 25 21:25:49 2015
[?1034hbash-3.2$ cat P1_A1.cpp
#include <ctime>
#include <iostream>
using namespace std;

/* Bubble Sort */
void bubble_sort (int array[], int size){
  for (int i = 0; i < size; i++){
    bool didSwap=false;
      for (int j = 0; j < size; j++){
        if (array[j] > array[j + 1]){
          didSwap=true;
          int temp = array[j];
          array[j] = array[j + 1];
          array[j + 1] = temp;
        }
      }
    if(!didSwap) break;
  }
}

/* Shaker Sort */
void shaker_sort(int array[], int size) {
    for (int i = 0; i < size/2; i++) {
        bool didSwap = false;
        for (int j = i; j < size - i - 1; j++) {
            if (array[j] > array[j+1]) {
                int tmp = array[j];
                array[j] = array[j+1];
                array[j+1] = tmp;
                didSwap = true;
            }
        }
        for (int j = size - 2 - i; j > i; j--) {
            if (array[j] < array[j-1]) {
                int tmp = array[j];
                array[j] = array[j-1];
                array[j-1] = tmp;
                didSwap = true;
            }
        }
        if(!didSwap) break;
    }
}

/* Shell Sort Version 1
	Gap 1/2 of array size */
void shell_sort1(int array[], int size) {
    int gap = size / 2;
    while (gap > 0) {
        for (int i = 0; i < size - gap; i++) {
            int j = i + gap;
            int tmp = array[j];
            while (j >= gap && tmp < array[j - gap]) {
                array[j] = array[j - gap];
                j -= gap;
            }
            array[j] = tmp;
        }
        if (gap == 2) {
            gap = 1;
        } else {
            gap /= 2;
        }
    }
}

/* Shell Sort Version 2
	Gap 1/10 array size */
void shell_sort2(int array[], int size) {
    int gap = size / 10;
    while (gap > 0) {
        for (int i = 0; i < size - gap; i++) {
            int j = i + gap;
            int tmp = array[j];
            while (j >= gap && tmp < array[j - gap]) {
                array[j] = array[j - gap];
                j -= gap;
            }
            array[j] = tmp;
        }
        if (gap == 2) {
            gap = 1;
        } else {
            gap /= 10;
        }
    }
}

/* 	Array fill function */
int fill(int *array, int size){
  srand(time(NULL));
  for(int i=0; i<size; i++){
        array[i] = (rand()%1000000); // limit random numbers to 0 MIN - 1,000,000 MAX
  }
  return *array;
}

/* 	Array print function */
int print (int *array, int n){
  for(int row=0; row<n/10; row++){
    for(int col=0; col<10; col++){
        printf("%i \t", array[(row*10)+col]);
      }
      printf("\n");
  }
  return *array;
}

/* Main */            
int main(){
  int array[100];                           //100 element array
  int n = sizeof(array)/sizeof(array[0]);   //number of elements in array
  clock_t t1,t2;                            //clock variables to measure execution time

/* Bubble Sort
  FIll, print, sort and measure execution time, print sorted
  and display sorting time */
  printf("\nBubble sort:\n");

  fill(array, n);
  printf("Original array:\n");
  print(array, n);

  t1=clock();
  bubble_sort (array, n);
  t2=clock();
  float diff = (t2-t1);
  float seconds = diff / CLOCKS_PER_SEC;

  printf("\nBubble Sorted array:\n");
  print(array, n);
  printf("\nBubble sort time: %.10f seconds.\n", seconds);


/* Shaker Sort
FIll, print, sort and measure execution time, print sorted
and display sorting time */
  printf("\nShaker sort:\n");

  fill(array, n);
  printf("Original array:\n");
  print(array, n);

  t1=clock();
  bubble_sort (array, n);
  t2=clock();
  diff = (t2-t1);
  seconds = diff / CLOCKS_PER_SEC;

  printf("\nShaker Sorted array:\n");
  print(array, n);
  printf("\nShaker sort time: %.10f seconds.\n", seconds);


/* Shell Sort 1
FIll, print, sort and measure execution time, print sorted
and display sorting time */
  printf("\nShell sort 1:\n");

  fill(array, n);
  printf("Original array:\n");
  print(array, n);

  t1=clock();
  shell_sort1 (array, n);
  t2=clock();
  diff = (t2-t1);
  seconds = diff / CLOCKS_PER_SEC;

  printf("\nShell Sorted array with gap = 1/2 array size:\n");
  print(array, n);
  printf("\nShell sort time: %.10f seconds.\n", seconds);


/* Shell Sort 2
FIll, print, sort and measure execution time, print sorted
and display sorting time */
  printf("\nShell sort 2:\n");

  fill(array, n);
  printf("Original array:\n");
  print(array, n);

  t1=clock();
  shell_sort1 (array, n);
  t2=clock();
  diff = (t2-t1);
  seconds = diff / CLOCKS_PER_SEC;

  printf("\nShell Sorted array with gap = 1/10 array size:\n");
  print(array, n);
  printf("\nShell sort time: %.10f seconds.\n", seconds);

  return 0;
}
bash-3.2$ g++ P1_a[KA1.cpp
bash-3.2$ ./a.out

Bubble sort:
Original array:
969619 	331874 	551582 	404605 	186690 	933560 	120505 	338496 	187920 	350164 	
967715 	218426 	307750 	172931 	742507 	211327 	950482 	681659 	325413 	99145 	
272608 	913511 	599482 	541035 	865142 	506028 	736723 	307733 	543403 	673455 	
334808 	377279 	891367 	893911 	92585 	369086 	115451 	555014 	722622 	381625 	
390464 	574416 	894290 	710377 	913351 	577691 	632816 	451008 	979952 	562258 	
663332 	128502 	637828 	80164 	327309 	398993 	283125 	780778 	898267 	437949 	
982433 	629851 	881972 	925495 	110356 	650386 	22107 	919204 	652876 	875055 	
930053 	316123 	289737 	621990 	163184 	112909 	927406 	614416 	87664 	283846 	
117522 	522000 	323784 	428905 	51718 	391912 	64822 	530775 	769224 	271364 	
591625 	151747 	467665 	224341 	216263 	776939 	228236 	829380 	148571 	605787 	

Bubble Sorted array:
22107 	51718 	64822 	80164 	87664 	92585 	99145 	110356 	112909 	115451 	
117522 	120505 	128502 	148571 	151747 	163184 	172931 	186690 	187920 	211327 	
216263 	218426 	224341 	228236 	271364 	272608 	283125 	283846 	289737 	307733 	
307750 	316123 	323784 	325413 	327309 	331874 	334808 	338496 	350164 	369086 	
377279 	381625 	390464 	391912 	398993 	404605 	428905 	437949 	451008 	467665 	
506028 	522000 	530775 	541035 	543403 	551582 	555014 	562258 	574416 	577691 	
591625 	599482 	605787 	614416 	621990 	629851 	632816 	637828 	650386 	652876 	
663332 	673455 	681659 	710377 	722622 	736723 	742507 	769224 	776939 	780778 	
829380 	865142 	875055 	881972 	891367 	893911 	894290 	898267 	913351 	913511 	
919204 	925495 	927406 	930053 	933560 	950482 	967715 	969619 	979952 	982433 	

Bubble sort time: 0.0000900000 seconds.

Shaker sort:
Original array:
969619 	331874 	551582 	404605 	186690 	933560 	120505 	338496 	187920 	350164 	
967715 	218426 	307750 	172931 	742507 	211327 	950482 	681659 	325413 	99145 	
272608 	913511 	599482 	541035 	865142 	506028 	736723 	307733 	543403 	673455 	
334808 	377279 	891367 	893911 	92585 	369086 	115451 	555014 	722622 	381625 	
390464 	574416 	894290 	710377 	913351 	577691 	632816 	451008 	979952 	562258 	
663332 	128502 	637828 	80164 	327309 	398993 	283125 	780778 	898267 	437949 	
982433 	629851 	881972 	925495 	110356 	650386 	22107 	919204 	652876 	875055 	
930053 	316123 	289737 	621990 	163184 	112909 	927406 	614416 	87664 	283846 	
117522 	522000 	323784 	428905 	51718 	391912 	64822 	530775 	769224 	271364 	
591625 	151747 	467665 	224341 	216263 	776939 	228236 	829380 	148571 	605787 	

Shaker Sorted array:
22107 	51718 	64822 	80164 	87664 	92585 	99145 	110356 	112909 	115451 	
117522 	120505 	128502 	148571 	151747 	163184 	172931 	186690 	187920 	211327 	
216263 	218426 	224341 	228236 	271364 	272608 	283125 	283846 	289737 	307733 	
307750 	316123 	323784 	325413 	327309 	331874 	334808 	338496 	350164 	369086 	
377279 	381625 	390464 	391912 	398993 	404605 	428905 	437949 	451008 	467665 	
506028 	522000 	530775 	541035 	543403 	551582 	555014 	562258 	574416 	577691 	
591625 	599482 	605787 	614416 	621990 	629851 	632816 	637828 	650386 	652876 	
663332 	673455 	681659 	710377 	722622 	736723 	742507 	769224 	776939 	780778 	
829380 	865142 	875055 	881972 	891367 	893911 	894290 	898267 	913351 	913511 	
919204 	925495 	927406 	930053 	933560 	950482 	967715 	969619 	979952 	982433 	

Shaker sort time: 0.0000850000 seconds.

Shell sort 1:
Original array:
969619 	331874 	551582 	404605 	186690 	933560 	120505 	338496 	187920 	350164 	
967715 	218426 	307750 	172931 	742507 	211327 	950482 	681659 	325413 	99145 	
272608 	913511 	599482 	541035 	865142 	506028 	736723 	307733 	543403 	673455 	
334808 	377279 	891367 	893911 	92585 	369086 	115451 	555014 	722622 	381625 	
390464 	574416 	894290 	710377 	913351 	577691 	632816 	451008 	979952 	562258 	
663332 	128502 	637828 	80164 	327309 	398993 	283125 	780778 	898267 	437949 	
982433 	629851 	881972 	925495 	110356 	650386 	22107 	919204 	652876 	875055 	
930053 	316123 	289737 	621990 	163184 	112909 	927406 	614416 	87664 	283846 	
117522 	522000 	323784 	428905 	51718 	391912 	64822 	530775 	769224 	271364 	
591625 	151747 	467665 	224341 	216263 	776939 	228236 	829380 	148571 	605787 	

Shell Sorted array with gap = 1/2 array size:
22107 	51718 	64822 	80164 	87664 	92585 	99145 	110356 	112909 	115451 	
117522 	120505 	128502 	148571 	151747 	163184 	172931 	186690 	187920 	211327 	
216263 	218426 	224341 	228236 	271364 	272608 	283125 	283846 	289737 	307733 	
307750 	316123 	323784 	325413 	327309 	331874 	334808 	338496 	350164 	369086 	
377279 	381625 	390464 	391912 	398993 	404605 	428905 	437949 	451008 	467665 	
506028 	522000 	530775 	541035 	543403 	551582 	555014 	562258 	574416 	577691 	
591625 	599482 	605787 	614416 	621990 	629851 	632816 	637828 	650386 	652876 	
663332 	673455 	681659 	710377 	722622 	736723 	742507 	769224 	776939 	780778 	
829380 	865142 	875055 	881972 	891367 	893911 	894290 	898267 	913351 	913511 	
919204 	925495 	927406 	930053 	933560 	950482 	967715 	969619 	979952 	982433 	

Shell sort time: 0.0000170000 seconds.

Shell sort 2:
Original array:
969619 	331874 	551582 	404605 	186690 	933560 	120505 	338496 	187920 	350164 	
967715 	218426 	307750 	172931 	742507 	211327 	950482 	681659 	325413 	99145 	
272608 	913511 	599482 	541035 	865142 	506028 	736723 	307733 	543403 	673455 	
334808 	377279 	891367 	893911 	92585 	369086 	115451 	555014 	722622 	381625 	
390464 	574416 	894290 	710377 	913351 	577691 	632816 	451008 	979952 	562258 	
663332 	128502 	637828 	80164 	327309 	398993 	283125 	780778 	898267 	437949 	
982433 	629851 	881972 	925495 	110356 	650386 	22107 	919204 	652876 	875055 	
930053 	316123 	289737 	621990 	163184 	112909 	927406 	614416 	87664 	283846 	
117522 	522000 	323784 	428905 	51718 	391912 	64822 	530775 	769224 	271364 	
591625 	151747 	467665 	224341 	216263 	776939 	228236 	829380 	148571 	605787 	

Shell Sorted array with gap = 1/10 array size:
22107 	51718 	64822 	80164 	87664 	92585 	99145 	110356 	112909 	115451 	
117522 	120505 	128502 	148571 	151747 	163184 	172931 	186690 	187920 	211327 	
216263 	218426 	224341 	228236 	271364 	272608 	283125 	283846 	289737 	307733 	
307750 	316123 	323784 	325413 	327309 	331874 	334808 	338496 	350164 	369086 	
377279 	381625 	390464 	391912 	398993 	404605 	428905 	437949 	451008 	467665 	
506028 	522000 	530775 	541035 	543403 	551582 	555014 	562258 	574416 	577691 	
591625 	599482 	605787 	614416 	621990 	629851 	632816 	637828 	650386 	652876 	
663332 	673455 	681659 	710377 	722622 	736723 	742507 	769224 	776939 	780778 	
829380 	865142 	875055 	881972 	891367 	893911 	894290 	898267 	913351 	913511 	
919204 	925495 	927406 	930053 	933560 	950482 	967715 	969619 	979952 	982433 	

Shell sort time: 0.0000170000 seconds.
bash-3.2$ exit

Script done on Fri Sep 25 21:26:57 2015
